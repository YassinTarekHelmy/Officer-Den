//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""3e1483ad-a83d-4556-9df0-d2e3e11092fd"",
            ""actions"": [
                {
                    ""name"": ""TheOfficerMiniGame"",
                    ""type"": ""Button"",
                    ""id"": ""6fdc9fc9-57fb-40e1-a479-ac09eecffb65"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""47dfec1c-ce70-4f9b-8fc4-d29b994ad32c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TheOfficerMiniGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Screen"",
            ""id"": ""a286eee7-3722-4b5a-b4fd-a6a2c3fb62bb"",
            ""actions"": [
                {
                    ""name"": ""ScreenCapture"",
                    ""type"": ""Button"",
                    ""id"": ""28ae358d-3328-4149-bf0a-add40acda0c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1a5bae19-4ae1-446a-9cb8-ba14aa85c962"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenCapture"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_TheOfficerMiniGame = m_Player.FindAction("TheOfficerMiniGame", throwIfNotFound: true);
        // Screen
        m_Screen = asset.FindActionMap("Screen", throwIfNotFound: true);
        m_Screen_ScreenCapture = m_Screen.FindAction("ScreenCapture", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_TheOfficerMiniGame;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TheOfficerMiniGame => m_Wrapper.m_Player_TheOfficerMiniGame;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @TheOfficerMiniGame.started += instance.OnTheOfficerMiniGame;
            @TheOfficerMiniGame.performed += instance.OnTheOfficerMiniGame;
            @TheOfficerMiniGame.canceled += instance.OnTheOfficerMiniGame;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @TheOfficerMiniGame.started -= instance.OnTheOfficerMiniGame;
            @TheOfficerMiniGame.performed -= instance.OnTheOfficerMiniGame;
            @TheOfficerMiniGame.canceled -= instance.OnTheOfficerMiniGame;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Screen
    private readonly InputActionMap m_Screen;
    private List<IScreenActions> m_ScreenActionsCallbackInterfaces = new List<IScreenActions>();
    private readonly InputAction m_Screen_ScreenCapture;
    public struct ScreenActions
    {
        private @PlayerInputActions m_Wrapper;
        public ScreenActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ScreenCapture => m_Wrapper.m_Screen_ScreenCapture;
        public InputActionMap Get() { return m_Wrapper.m_Screen; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ScreenActions set) { return set.Get(); }
        public void AddCallbacks(IScreenActions instance)
        {
            if (instance == null || m_Wrapper.m_ScreenActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ScreenActionsCallbackInterfaces.Add(instance);
            @ScreenCapture.started += instance.OnScreenCapture;
            @ScreenCapture.performed += instance.OnScreenCapture;
            @ScreenCapture.canceled += instance.OnScreenCapture;
        }

        private void UnregisterCallbacks(IScreenActions instance)
        {
            @ScreenCapture.started -= instance.OnScreenCapture;
            @ScreenCapture.performed -= instance.OnScreenCapture;
            @ScreenCapture.canceled -= instance.OnScreenCapture;
        }

        public void RemoveCallbacks(IScreenActions instance)
        {
            if (m_Wrapper.m_ScreenActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IScreenActions instance)
        {
            foreach (var item in m_Wrapper.m_ScreenActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ScreenActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ScreenActions @Screen => new ScreenActions(this);
    public interface IPlayerActions
    {
        void OnTheOfficerMiniGame(InputAction.CallbackContext context);
    }
    public interface IScreenActions
    {
        void OnScreenCapture(InputAction.CallbackContext context);
    }
}
